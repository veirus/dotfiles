" vim: tw=80 fdl=1 fdm=marker:
" ===================================================
" Be Improved {{{2
" romainl says it's useless...
if &cp | set nocp | endif
" ========================================
" encoding {{{2
" explanation: http://stackoverflow.com/a/5795441/453396
if has("multi_byte")
	if &termencoding == ""
		let &termencoding = &encoding
	endif
	set encoding=utf-8                      "better default than latin1
	setglobal fileencoding=utf-8            "change default file encoding when writing new files
	set fileencodings=utf-8,cp1251,utf-16le,cp866,koi8r,ucs-2le "cyrillic edition
endif
" ========================================
" mapleader {{{2
let mapleader    = "\<space>"
" let g:mapleader  = "\<space>" " why there's a second one?
" ========================================
" ENV detect and colors {{{2
let g:is = {
			\ 'windows' : has('win32') || has('win64'),
			\ 'cygwin'  : has('win32unix'),
			\ 'macvim'  : has('gui_macvim'),
			\ 'nvim'    : has('nvim'),
			\ 'nyaovim' : exists('g:nyaovim_version'),
			\ 'gui'     : has('gui_running'),
			\ 'conemu'  : !empty($CONEMUBUILD),
			\ 'prostor' : $USERNAME ==? 'oldschool'
			\ }
let g:is.wingui = g:is.windows && g:is.gui
" -- theme assignment --
let g:cs = {
			\ 'xterm': 'jellybeans',
			\ 'nvim':  'molokai',
			\ 'conemu': 'badwolf',
			\ 'wingui': g:is.prostor ? 'base16-gruvbox-dark-medium' : 'nova'
			\ }
" ========================================
" rtp {{{2 portability shim:
let $DOTVIMDIR = expand('$HOME/vimfiles')
if !isdirectory(expand('$DOTVIMDIR'))
	let $DOTVIMDIR = expand('$VIM/vimfiles')
	echom "** ! **: dotfiles dir don't exist"
endif
set rtp^=$DOTVIMDIR
" ========================================
" dirs: plugs, swap, undo, backups {{{2
set nobackup                " Отключить создание файлов бекапа
set nowritebackup
set noswapfile              " и свапа
set history=1000
set sessionoptions-=options " do not store all options and mappings (also
" global values for local options)
" let s:plugs = 'pack/plug/opt' " can't really disable colorschemes
let s:plugs = 'bundle'
let s:plugdir = expand($DOTVIMDIR.'/'.s:plugs)
set backupdir=$DOTVIMDIR/backups
set directory=$DOTVIMDIR/swap
set undodir=$DOTVIMDIR/undo
if !g:is.nvim
	set viminfo+=n$DOTVIMDIR/swap/viminfo
endif
" Make those folders automatically if they don't already exist.
for i in [&undodir, &backupdir, &directory, s:plugdir]
	let e = expand(i)
	if !isdirectory(e)
		call mkdir(e, "p")
	endif
	unlet i e
endfor
" ========================================
" clipboard {{{2
if has('clipboard')
	if has('unnamedplus')         " When possible use + register for copy-paste
		set clipboard=unnamed,unnamedplus
	else                          " On mac and Windows, use * register for copy-paste
		set clipboard=unnamed
	endif
endif
" }}}
" Plugins {{{1
call plug#begin(s:plugdir)
runtime b\core.vim
runtime b\textobj.vim
runtime b\webdev.vim
runtime b\new.vim
runtime b\old.vim
runtime b\colors.vim
runtime b\async.vim
runtime b\statusline.vim
" runtime b\lightline.vim
" runtime b\airline.vim
" b\unused.vim
call plug#end() " required }}}1
" General {{{2
" scriptencoding utf-8
set timeout timeoutlen=230

set iskeyword=@,a-z,A-Z,48-57,_,128-175,192-255
set keymap=russian-jcukenwin
set iminsert=0              " раскладка по умолчанию для ввода - английская
set imsearch=0              " раскладка по умолчанию для поиска - английская

set nrformats-=octal
set mouse=a
set autoread
set hidden                  " Allow buffer switching without saving
set path+=**                " doesn't work well in Windows, laggy
set synmaxcol=800           " Don't try to highlight lines longer than 800 chars

" Better Completion
set complete=.,w,b,u,t
set completeopt=longest,menuone
"}}}2
" Formatting {{{2

if has('virtualedit')
	" allow cursor to move where there is no text in visual block mode
	set virtualedit=block
endif

set formatoptions=qrn1j
set formatoptions+=M
" set formatoptions-=t           " don't automatically wrap text when typing
" set formatoptions+=j           " Delete comment character when joining commented lines

set backspace=indent,eol,start " Backspace for dummies
set nowrap
set textwidth=0                " Don't automatically insert linebreaks
set autoindent
set shiftround
set smarttab
set noexpandtab
set tabstop=4                  " размер табов
set softtabstop=4
set shiftwidth=4               " размер отступов
set linebreak
let &showbreak='▷ '            " Iosevka doesn't has above symbol
if !g:is.prostor
	let &showbreak='↪ '
endif
set breakindent
set nojoinspaces               " Prevents inserting two spaces after punctuation on a join (J)

" }}}2
" UI {{{2

set colorcolumn=+1
set cmdheight=2
set noeb
set lazyredraw
set scrolloff=3                                      " Minimum lines to keep above and below cursor
set scrolljump=5                                     " Lines to scroll when cursor leaves screen
set shortmess=amroOtT                                " a doesn't add m and r despite what docs says
set cursorline
set number                                           " Line numbers on
set relativenumber
set showmatch                                        " Show matching brackets/parenthesis
set matchtime=2                                      " tens of a second to show matching parentheses
set incsearch                                        " Find as you type search
set nohlsearch                                       " Highlight search terms; it's annoying and distracting, turning it off - 2016-12-15:
set winminheight=0                                   " Windows can be 0 line high
set ignorecase                                       " Case insensitive search
" set infercase                                        " https://bluz71.github.io/2017/05/15/vim-tips-tricks.html
set smartcase                                        " Case sensitive when uc present
set wildmenu                                         " Show list instead of just completing
set wildcharm=<C-z>
set wildmode=list:longest,full                       " Command <Tab> completion, list matches, then longest common part, then all.
set wildignore+=node_modules/**,*/.git/*,*/tmp/*,*.swp
set foldenable                                       " Auto fold code

set guicursor+=a:blinkon0

set list
set listchars=tab:│\ ,eol:¬,trail:•,extends:#,nbsp:⋅ " Highlight problematic whitespace
" set listchars=tab:›\ ,trail:•,extends:#,nbsp:⋅ " Highlight problematic whitespace
" set listchars=tab:▷⋅,trail:⋅,nbsp:⋅            " Alternative settings

set splitright                                 " Puts new vsplit windows to the right of the current
set splitbelow                                 " Puts new split windows to the bottom of the current

" Specify the behavior when switching between buffers
try
	set switchbuf=useopen,usetab,newtab
	set showtabline=1
catch
endtry

" netrw
let g:netrw_altv=1                             " open splits to the right
let g:netrw_banner=0
let g:netrw_browse_split = 4
" liststyle=3 has problems
" let g:netrw_liststyle=2
let g:netrw_silent = 1
let g:netrw_winsize = 25

" set shortmess+=filmnrxoOtT                     " Abbrev. of messages (avoids 'hit enter')
" set foldopen=all                               " Автооткрытие сверток при заходе в них
" set whichwrap=b,s,h,l,<,>,[,]                  " Backspace and cursor keys wrap too
" execute " set colorcolumn=".join(range(80,335), ',')|   "Discolor every column past column 80

" /UI }}}2
" Terminal settings {{{1
if !g:is.gui

	set vb t_vb=
	set ttimeout ttimeoutlen=50

	" ConEmu terminal settings {{{2
	if g:is.conemu && !g:is.nvim
		" it's already set above
		" set vb t_vb=
		set term=xterm
		set termencoding=utf8
		set t_Co=256
		let &t_AB="\e[48;5;%dm"
		let &t_AF="\e[38;5;%dm"

	" neovim {{{2
	elseif g:is.nvim
		" let s:editor_root=expand("~/AppData/Local/nvim")
		let g:python_host_prog = 'D:/env/neovim/2/Scripts/python.exe'
		let g:python3_host_prog = 'D:/env/neovim/3/Scripts/python.exe'
		if exists('g:GuiFont')
			" WTF?! Doesn't work?
			" let g:Guifont="DejaVu Sans Mono for Powerline:h13"

			" Works and even looks nice, however reports bad fixed pitch metrics
			" Also it's risky to install patched version on Windows
			" GuiFont Consolas:h13
			" works only when :so %
			" GuiFont DejaVu Sans Mono for Powerline:h13

			" Warning: bad fixed pitch metrics?!
			" GuiFont Anonymice Powerline:h12

			"is not fixed pitch font?!
			" GuiFont Arimo for Powerline:h12
			" GuiFont DejaVu Sans Mono for Powerline:h13
			" GuiFont Literation Mono Powerline:h12
			" GuiFont Roboto Mono for Powerline:h13
			" GuiFont Tinos for Powerline:h12

			" Sluggish unaliased look
			" GuiFont Droid Sans Mono for Powerline:h12
			" GuiFont Fira Mono Medium for Powerline:h12

			" A little better look than Droid Sans and Fira
			" GuiFont monofur for Powerline:h14

			" Unknown font
			" GuiFont Ubuntu Mono derivative Powerline:h12
		endif
	endif

	" Disable Background Color Erase (BCE) so that color schemes {{{2
	" render properly when inside 256-color tmux and GNU screen.
	" if &term =~ '256color'
	"   set t_ut=
	" endif
endif

"}}}1

call cw#SetColors()

" Autocommands {{{1
if has("autocmd")
	" augroup leave_insert_mode " {{{2 [ disabled ]
	"   au!
	"   autocmd FocusLost,TabLeave * call feedkeys("\<C-\>\<C-n>") | :wa
	" augroup END
	augroup auto_save_and_read " {{{2
		autocmd!
		autocmd FocusLost * silent! wall
		" autocmd TextChanged,InsertLeave,FocusLost * silent! wall
		autocmd CursorHold * silent! checktime
	augroup END

	" PHP_stuff {{{2
	function! SetClosetagPHP()
		if exists('g:closetag_filenames')
			let g:closetag_filenames.= ",*.php,*.tpl"
		endif
	endfunction

	augroup PHP_stuff
		autocmd!
		autocmd FileType php,smarty,tpl call SetClosetagPHP()
		autocmd FileType smarty,tpl setlocal commentstring=<!--\ %s\ -->
	augroup END
	augroup indent_tag " {{{2 for html, jango and jinja
		au!
		au FileType html,jinja,htmldjango nnoremap <buffer> <localleader>= Vat=
	augroup end

	augroup statusline_tab_warning " {{{2
		autocmd!
		"recalculate the tab warning flag when idle and after writing
		autocmd cursorhold,bufwritepost * unlet! b:statusline_tab_warning
		"recalculate the trailing whitespace warning when idle, and after saving
		autocmd cursorhold,bufwritepost * unlet! b:statusline_trailing_space_warning
	augroup end

	augroup active_relative_number " {{{2
		autocmd!
		autocmd WinEnter * :setlocal number relativenumber
		autocmd WinLeave * :setlocal norelativenumber
	augroup END

	augroup reload_vimrc " {{{2
		autocmd!
		autocmd BufWritePost [_.g]\\\{-\}vimrc,init.vim nested source $MYVIMRC | echo 'vimrc reloaded'
		" autocmd bufwritepost _vimrc,init.vim,vimrc nested source $MYVIMRC
		" Alternative, not working very well, so disabled:
		" autocmd BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC
		" autocmd bufwritepost $HOME/_vimrc execute "normal! :source ~/_vimrc"
	augroup END
	augroup Python_skeleton "{{{2
		autocmd!
		autocmd BufNewFile *.py[w]\\\{-\} call cw#SkeletonPY()
	augroup END

	" Return to last edit position when opening files (You want this!) {{{2
	augroup thaw_file
		autocmd!

		autocmd BufReadPost *
					\ if line("'\"") > 0 && line("'\"") <= line("$") |
					\ exe "normal! g`\"" |
					\ endif
	augroup END
	" Remember info about open buffers on close
	set viminfo^=%

	" modal cursor {{{2 [disabled] [possible slowdown] [flickering]
	" augroup modal_cursor
	" 	au!
	" 	au ColorScheme * call cw#SetModalCursor()
	" augroup END

endif " }}}1
" grepprg, ag, rg & ctrlp {{{ "

if g:is.prostor
	" because 'home' doesn't have ripgrep
	if executable("rg")
		set grepprg=rg\ --vimgrep\ --color=never
		" \ --smartcase
		let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
		let g:ctrlp_use_caching = 0
	endif
else
	if executable("ag")
		set grepprg=ag\ --nogroup\ --nocolor\ --ignore-case\ --vimgrep
		set grepformat^=%f:%l:%c:%m
		let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
		if g:is.windows
			" fix for windows:
			let g:ctrlp_user_command = 'ag -l --nocolor -g "" %s'
		endif
		let g:ctrlp_use_caching = 0
	endif
endif

" }}} grepprg, ag, rg & ctrlp "
