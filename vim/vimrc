" vim: set fdl=1 fdm=marker:
" encoding {{{2
" explanation: http://stackoverflow.com/a/5795441/453396
if has("multi_byte")
	if &termencoding == ""
		let &termencoding = &encoding
	endif
	set encoding=utf-8                      " better default than latin1
	setglobal fileencoding=utf-8            " change default file encoding when writing new files
	" Actually, setting 'fencs' messes up default 'fenc' autodetection:
	" set fileencodings=utf-8,utf-16le,cp1251,cp866,koi8r,ucs-2le "cyrillic edition
endif
set langmenu=ru_RU
" ========================================
" ENV detect {{{2
let g:is = {
			\ 'windows' : has('win32') || has('win64'),
			\ 'cygwin'  : has('win32unix'),
			\ 'macvim'  : has('gui_macvim'),
			\ 'nvim'    : has('nvim'),
			\ 'nyaovim' : exists('g:nyaovim_version'),
			\ 'gui'     : has('gui_running'),
			\ 'conemu'  : !empty($CONEMUBUILD),
			\ 'prostor' : $USERNAME ==? 'oldschool'
			\ }
let g:is.wingui = g:is.windows && g:is.gui
" ========================================
" rtp {{{2 portability shim:
let $DOTVIMDIR = expand('$HOME/vimfiles')
if !isdirectory(expand('$DOTVIMDIR'))
	let $DOTVIMDIR = expand('$VIM/vimfiles')
	echom "** ! **: dotfiles dir don't exist"
endif
set rtp^=$DOTVIMDIR
if g:is.nvim
	let &packpath = &runtimepath
endif
" ========================================
" dirs: plugs, swap, undo, backups {{{2
set nobackup                " Отключить создание файлов бекапа
set nowritebackup
set noswapfile              " и свапа
set history=1000
set sessionoptions-=options " do not store all options and mappings (also
" global values for local options)
" let s:plugs = 'pack/plug/opt' " can't really disable colorschemes
let s:plugdir = expand($DOTVIMDIR.'/bundle')
set backupdir=$DOTVIMDIR/backups//
set directory=$DOTVIMDIR/swap//
set undodir=$DOTVIMDIR/undo//
if !g:is.nvim
	set viminfo+=n$DOTVIMDIR/swap/viminfo
endif
" Make those folders automatically if they don't already exist.
for i in [&undodir, &backupdir, &directory, s:plugdir]
	let s:e = expand(i)
	if !isdirectory(s:e)
		call mkdir(s:e, "p")
	endif
	unlet i s:e
endfor
" ========================================
" clipboard {{{2
if has('clipboard')
	if has('unnamedplus')         " When possible use + register for copy-paste
		set clipboard=unnamed,unnamedplus
	else                          " On mac and Windows, use * register for copy-paste
		set clipboard=unnamed
	endif
endif
" mapleader {{{2
" needs to be before bundle so plugins map correctly
let mapleader    = "\<space>"
" ========================================
" }}}
" Plugins {{{1
call plug#begin(s:plugdir)
runtime b\core.vim
runtime b\textobj.vim
runtime b\webdev.vim
runtime b\emmet.vim
runtime b\todo.vim
runtime b\new.vim
runtime b\old.vim
runtime b\colors.vim
runtime b\lightline.vim
" runtime b\statusline1.vim
" runtime b\asynccm.vim
" runtime b\repmo.vim
" b\unused.vim
" ===========================================
call plug#end() " required }}}1
" General {{{2
" scriptencoding utf-8      " should be after 'set enc'
set timeout timeoutlen=370

" language specific
" must be set before loading menus, filetype or syntax
" set langmenu=en_US.UTF-8    " sets the language of the menu (gvim)
language en                 " sets the language of the messages / ui (vim)
set iskeyword=@,a-z,A-Z,48-57,_,128-175,192-255
set keymap=russian-jcukenwin
set iminsert=0              " раскладка по умолчанию для ввода - английская
set imsearch=0              " раскладка по умолчанию для поиска - английская

set nrformats-=octal
set mouse=a
set autoread
set hidden                  " Allow buffer switching without saving
set path+=**                " doesn't work well in Windows, laggy
set synmaxcol=800           " Don't try to highlight lines longer than 800 chars

" Better Completion
set complete=.,w,b,u,t
set completeopt=longest,menuone
"}}}2
" Formatting {{{2

if has('virtualedit')
	" allow cursor to move where there is no text in visual block mode
	set virtualedit=block
endif

set formatoptions=qrn1j
" q - Allow formatting of comments with "gq"
" r - insert comment leader on <Enter> in Insert mode
" n - recognize numbered lists when formating text
" 1 - Don't break a line after a one-letter word, break it before if possible
" j - remove a comment leader when joining lines

set backspace=indent,eol,start   " Backspace that behaves like in other editors
set nowrap
" set linebreak                  " Disabled to learn how Vim behaves without it - 2018-05-05
let &showbreak='▷ '              " Iosevka doesn't have above symbol
if !g:is.prostor
	let &showbreak='↪ '
endif
set breakindent
set autoindent
set smarttab
set noexpandtab
set tabstop=4                  " размер табов
set shiftwidth=0               " размер отступов, when 0 use tabstop value
set softtabstop=-1             " when -1 it will use shiftwidth value
set shiftround
set nojoinspaces               " Prevents inserting two spaces after punctuation on a join (J)

" }}}2
" UI {{{2

set colorcolumn=+1
set cmdheight=2
set noeb
set lazyredraw                 " don't redraw when executing macros, registers or commands that not typed
set scrolloff=3                " Minimum lines to keep above and below cursor
set sidescrolloff=5
set scrolljump=5               " Lines to scroll when cursor leaves screen
set shortmess=amroOtT          " a doesn't add m and r despite what docs says
set cursorline
set number                     " Line numbers on
set relativenumber             " may slowdown Vim
set showmatch                  " Show matching brackets/parenthesis
set matchtime=2                " tens of a second to show matching parentheses
set incsearch                  " Find as you type search
set nohlsearch                 " Highlight search terms; it's annoying and distracting, turning it off - 2016-12-15:
set ignorecase                 " Case insensitive search
" set infercase                " https://bluz71.github.io/2017/05/15/vim-tips-tricks.html
set smartcase                  " Case sensitive when uc present
set wildmenu                   " Show list instead of just completing
set wildmode=list:longest,full " Command <Tab> completion, list matches, then longest common part, then all.
set wildignore+=*/min/*,*/vendor/*,*/node_modules/*,*/bower_components/*,*/.git/*,*/tmp/*,*.swp
set foldenable                 " Auto fold code
set winminheight=0             " Splits can be 0 line high
set splitright                 " Puts new vsplit windows to the right of the current
set splitbelow                 " Puts new split windows to the bottom of the current

" set guicursor+=a:blinkon0

" Specify the behavior when switching between buffers
try
	" is try..catch necessary? - 2018-05-05
	set switchbuf=useopen,usetab,newtab
	set showtabline=1
catch
endtry

set list
set listchars=tab:│\ ,eol:¬,trail:•,extends:#,nbsp:⋅ " Highlight problematic whitespace
" Alternative settings:
" set listchars=tab:›\ ,trail:•,extends:#,nbsp:⋅
" set listchars=tab:▷⋅,trail:⋅,nbsp:⋅

" netrw
let g:netrw_altv=1                             " open splits to the right
let g:netrw_banner=0
let g:netrw_browse_split = 4
let g:netrw_preview   = 1
" liststyle=3 has problems
" let g:netrw_liststyle=2
let g:netrw_silent = 1
let g:netrw_winsize = 25

" set shortmess+=filmnrxoOtT                     " Abbrev. of messages (avoids 'hit enter')
" set foldopen=all                               " Автооткрытие сверток при заходе в них
" set whichwrap=b,s,h,l,<,>,[,]                  " Backspace and cursor keys wrap too
" execute " set colorcolumn=".join(range(80,335), ',')|   "Discolor every column past column 80

" /UI }}}2
" Terminal settings {{{1
if !g:is.gui

	set vb t_vb=
	set nocursorline
	set ttimeout ttimeoutlen=50

	" ConEmu terminal settings {{{2
	if g:is.conemu && !g:is.nvim
		set termguicolors
		" it's already set above:
		" set vb t_vb=
		set term=xterm
		set termencoding=utf8
		set t_Co=256
		let &t_AB="\e[48;5;%dm"
		let &t_AF="\e[38;5;%dm"
		" backspace fix for conemu/cmder:
		inoremap <Char-0x07F> <BS>
		nnoremap <Char-0x07F> <BS>

	" neovim {{{2
	elseif g:is.nvim
		set clipboard+=unnamedplus
		set inccommand=nosplit
		set title
		" let s:editor_root=expand("~/AppData/Local/nvim")
		" let g:python_host_prog = 'D:/env/neovim/2/Scripts/python.exe'
		" let g:python3_host_prog = 'D:/env/neovim/3/Scripts/python.exe'
	endif

	" Disable Background Color Erase (BCE) so that color schemes {{{2
	" render properly when inside 256-color tmux and GNU screen.
	" if &term =~ '256color'
	"   set t_ut=
	" endif
endif

"}}}1

call cw#ApplyColorschemes()

" Autocommands {{{1
if has("autocmd")
	augroup auto_save_and_read " {{{2
		autocmd!
		autocmd FocusLost * silent! wall
		" alt method using "^\^n":
		" autocmd FocusLost,TabLeave * call feedkeys("\<C-\>\<C-n>") | :wa
		" disabled this because it's too disruptive:
		" autocmd TextChanged,InsertLeave,FocusLost * silent! wall
		autocmd CursorHold * silent! checktime
	augroup END
	" PHP_stuff {{{2
	function! SetClosetagPHP()
		if exists('g:closetag_filenames')
			let g:closetag_filenames.= ",*.php,*.tpl"
		endif
	endfunction

	augroup PHP_stuff
		autocmd!
		autocmd FileType php,smarty,tpl call SetClosetagPHP()
		" autocmd FileType smarty,tpl setlocal commentstring=<!--\ %s\ -->
	augroup END
	augroup indent_tag " {{{2 for html, jango and jinja
		au!
		au FileType html,jinja,htmldjango nnoremap <buffer> <localleader>= Vat=
	augroup end

	augroup statusline_tab_warning " {{{2
		autocmd!
		"recalculate the tab warning flag when idle and after writing
		autocmd cursorhold,bufwritepost * unlet! b:statusline_tab_warning
		"recalculate the trailing whitespace warning when idle, and after saving
		autocmd cursorhold,bufwritepost * unlet! b:statusline_trailing_space_warning
	augroup end

	" augroup active_relative_number " {{{2
	" 	autocmd!
	" 	autocmd WinEnter * :setlocal number relativenumber
	" 	autocmd WinLeave * :setlocal norelativenumber
	" augroup END

	augroup reload_vimrc " {{{2
		autocmd!
		autocmd BufWritePost [_.g]\\\{-\}vimrc,init.vim nested source $MYVIMRC | echo 'vimrc reloaded'
		" autocmd bufwritepost _vimrc,init.vim,vimrc nested source $MYVIMRC
		" Alternative, not working very well, so disabled:
		" autocmd BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC
		" autocmd bufwritepost $HOME/_vimrc execute "normal! :source ~/_vimrc"
	augroup END

	" Return to last edit position when opening files (You want this!) {{{2
	augroup thaw_file
		autocmd!
		autocmd BufReadPost *
					\ if line("'\"") > 0 && line("'\"") <= line("$") |
					\ exe "normal! g`\"" |
					\ endif
	augroup END
	" Remember info about open buffers on close
	" set viminfo^=%

	" modal cursor {{{2 [disabled] [possible slowdown] [flickering]
	" augroup modal_cursor
	" 	au!
	" 	au ColorScheme * call cw#SetModalCursor()
	" augroup END

	" Create absent dirs automatically {{{2 [disabled]
	" replaced with function in plugins
	" augroup auto_mkdir
	" 	autocmd!
	" 	autocmd BufWritePre *
	" 				\ if !isdirectory(expand('<afile>:p:h')) |
	" 				\ call mkdir(expand('<afile>:p:h'), 'p') |
	" 				\ endif
	" augroup END

	" Set default omnifunc to syntax complete for all files {{{2
	augroup vim_omni
		autocmd!
		autocmd Filetype *
				\	if &omnifunc == "" |
				\		setlocal omnifunc=syntaxcomplete#Complete |
				\	endif
	augroup END
	augroup help_maps
		autocmd!
		au FileType help noremap <buffer> q :q<cr>
	augroup END
endif " }}}1

" grepprg, ag, rg & ctrlp {{{ "
if executable("ag")
	set grepprg=ag\ --nogroup\ --nocolor\ --ignore-case\ --vimgrep
	set grepformat^=%f:%l:%c:%m
	let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
	if g:is.windows
		" fix for windows:
		let g:ctrlp_user_command = 'ag -l --nocolor -g "" %s'
	endif
	let g:ctrlp_use_caching = 0
endif
if executable("rg")
	set grepprg=rg\ --vimgrep\ --color=never
	" \ --smartcase
	set grepformat=%f:%l:%c:%m,%f:%l:%m
	let g:ackprg = 'rg --vimgrep --no-heading'
	let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
	let g:ctrlp_use_caching = 0
endif
" }}} grepprg, ag, rg & ctrlp "

" for completor.vim {{{

" obligatory:
" set completeopt+=noinsert
" set completeopt&
" ???
" if &completeopt !~# 'noinsert\|noselect'
" 	set completeopt+=noselect
" endif
" ???
let g:completor_complete_options = 'menuone,noselect,preview'

" doesn't work:
" let g:completor_node_binary = escape(fnamemodify('C:\Program Files\nodejs\node.exe',':p:gs?\\?/?g'), '')
let g:completor_node_binary = escape(expand('$programfiles\nodejs\node.exe'), '')

" Use TAB to complete when typing words, else inserts TABs as usual.  Uses
" dictionary, source files, and completor to find matching words to complete.

" Note: usual completion is on <C-n> but more trouble to press all the time.
" Never type the same word twice and maybe learn a new spellings!
" Use the Linux dictionary when spelling is in doubt.
function! Tab_Or_Complete() abort
  " If completor is already open the `tab` cycles through suggested completions.
  if pumvisible()
	return "\<C-N>"
  " If completor is not open and we are in the middle of typing a word then
  " `tab` opens completor menu.
  elseif col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^[[:keyword:][:ident:]]'
	return "\<C-R>=completor#do('complete')\<CR>"
  else
	" If we aren't typing a word and we press `tab` simply do the normal `tab`
	" action.
	return "\<Tab>"
  endif
endfunction

" Use `tab` key to select completions.  Default is arrow keys.
" inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Use tab to trigger auto completion.  Default suggests completions as you type.
" let g:completor_auto_trigger = 0
inoremap <expr> <S-Tab> Tab_Or_Complete()
"}}}

" JSX highlighting
let g:jsx_ext_required=0

" renderoptions working example {{{
if !(is.nvim) && (is.gui)
	set rop=type:directx,gamma:1.0,contrast:0.5,level:1,geom:1,renmode:4,taamode:1
endif
"}}}

" by Marco Trosi's advice:
set nostartofline

" quick add plugins for a minpac {{{1
" 2019-03-19
function! AddPacFromCb(...) abort
	if v:version >= 801 || (v:version == 800 && has("patch1630"))
		let l:cb = trim(@+)
	else
		" do oldschool way to trim all spaces and whatnot
		let l:cb = substitute(@+,'\v^\s*(.{-})\s*\n$','\1','')
	endif
	let l:cb = substitute(l:cb, '\v^https://github.com/','','')
	if a:0
		put = 'Plug ''' . l:cb . ''''
	else
		" without the `Plug` command
		" put = 'call minpac#add(''' . l:cb . ''')'
		return 'Plug ''' . l:cb . ''''
	endif
endfunction
nnoremap <leader>l :call AddPacFromCb(1)<CR>
iabbr plu <C-R>=AddPacFromCb()<CR>

" 2019-06-22
set gdefault

" 2020-03-24 from discord
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall

cnoreabbrev X x
cnoreabbrev Xa xa

cnoreabbrev H h
cnoreabbrev hg helpgrep
cnoreabbrev Hg helpgrep

" Does anyone now how i could make it so that tapping the colon twice in a row would bring up my last command?
" so :: would do what : upArrow would do
" , because i have it switched with :
cnoremap <expr> , getcmdpos() == 1? '<c-p>' : ','
cnoremap <expr> : getcmdpos() == 1? '<c-p>' : ':'

" Quick jump to errors
nmap <silent> <M-h> <Plug>(ale_previous_wrap)
nmap <silent> <M-l> <Plug>(ale_next_wrap)

"ctrl-l autocorrect misspelled words
inoremap <C-i> u[s1z=`]au
hi clear SpellBad
hi SpellBad cterm=underline 

" http://karolis.koncevicius.lt/posts/porn_zen_and_vimr
" make n always search forward and N backward
nnoremap <expr> n 'Nn'[v:searchforward]
nnoremap <expr> N 'nN'[v:searchforward]

" make ; always "find" forward and , backward
" NOTE: remember that i remapped , to : !!!
nnoremap <expr> ; getcharsearch().forward ? ';' : ':'
nnoremap <expr> : getcharsearch().forward ? ':' : ';'c/

" for vim-emoji
inoremap <leader>e <C-O>:%s/:\([^:]\+\):/\=emoji#for(submatch(1), submatch(0))/g<CR>
nnoremap <leader>e :%s/:\([^:]\+\):/\=emoji#for(submatch(1), submatch(0))/g<CR>

" [2021-01-12 03:12]
" https://stevelosh.com/blog/2010/09/coming-home-to-vim/#using-the-leader
" I work with HTML often, so I have ,ft mapped to a "fold tag" function:
nnoremap <leader>ft Vatzf

" I also work with Nick Sergeant and he likes his CSS properties sorted, so here's a ,S mapping that sorts them for me:
nnoremap <leader>S ?{<CR>jV/^\s*\}?$<CR>k:sort<CR>:noh<CR>
let g:nv_search_paths = ['~/txt', '~/Dropbox/TODO/']
