" vim: set sw=2 ts=4 sts=2 et tw=80 fdl=1 foldmethod=marker:
" ==========================================================
" CW's _vimrc | merging with PROSTOR | last edit: 2017-07-05 (merged at 2017-06-20 Вт 16:42)
" ==========================================================
" NOTE: OH MY GOD THIS IS FUCKING MESS!!!
if has('vim_starting')
  " TODO: move some things here to make world better
  " NOTE: oh wow NOTE gets highlighted! That's neat.
  " echo 'This message appears at startup but not on `:source $MYVIMRC`'
endif
" Be Improved {{{2
" romainl says it's useless... But if it's set for some reason...
if &cp | set nocp | endif
" ========================================
" encoding {{{2
" explanation: http://stackoverflow.com/a/5795441/453396
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8                      "better default than latin1
  setglobal fileencoding=utf-8            "change default file encoding when writing new files
  set fileencodings=utf-8,cp1251,utf-16le,cp866,koi8r,ucs-2le "cyrillic edition
endif
" ========================================
" mapleader {{{2
let mapleader    = "\<space>"
let g:mapleader  = "\<space>"
" ========================================
" ENV detect {{{2
let s:is_windows = has('win32') || has('win64')
let g:is_wingui  = has("gui_win32")
let s:is_cygwin  = has('win32unix')
let g:is_macvim  = has('gui_macvim')
let g:is_nvim    = has('nvim')
let s:is_nyaovim = exists('g:nyaovim_version')
let s:is_gui     = has('gui_running')
let g:is_conemu  = !empty($CONEMUBUILD)
let s:is_prostor = $USERNAME ==? 'oldschool'
" ========================================
" rtp {{{2 portability shim:
let $DOTVIMDIR = expand('$HOME/vimfiles')
if !isdirectory(expand('$DOTVIMDIR'))
  let $DOTVIMDIR = expand('$VIM/vimfiles')
  echom "** ! **: dotfiles dir don't exist"
endif
set rtp^=$DOTVIMDIR
" ========================================
" dirs: plugs, swap, undo, backups {{{2
set nobackup                " Отключить создание файлов бекапа
set nowritebackup
set noswapfile              " и свапа
set history=1000
set sessionoptions-=options " do not store all options and mappings (also
" global values for local options)
" let s:plugs = 'pack/plug/opt' " can't really disable colorschemes
let s:plugs = 'plugged'
let s:plugdir = expand($DOTVIMDIR.'/'.s:plugs)
set backupdir=$DOTVIMDIR/backups
set directory=$DOTVIMDIR/swap
set undodir=$DOTVIMDIR/undo
if !g:is_nvim
  set viminfo+=n$DOTVIMDIR/swap/viminfo
endif
" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
  call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
  call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
  call mkdir(expand(&directory), "p")
endif
" ========================================
" clipboard {{{2
if has('clipboard')
  if has('unnamedplus')         " When possible use + register for copy-paste
    set clipboard=unnamed,unnamedplus
  else                          " On mac and Windows, use * register for copy-paste
    set clipboard=unnamed
  endif
endif

" }}}

" Plugin Install {{{1
" let g:plug_threads = 2
call plug#begin(s:plugdir)
" == Necessity == {{{2
Plug 'editorconfig/editorconfig-vim'
" Emmet {{{3
let emmetlist = ['html','smarty','pug','php','xml','xsl','xslt','xsd','css',
      \ 'sass','scss','less','styl','stylus','mustache','handlebars']
Plug 'mattn/emmet-vim', {'for': emmetlist }
let g:user_emmet_settings = {
      \ 'php': {
      \     'snippets': {
      \         'php':  "<?php |; ?>",
      \         'tf':   "<?php the_field('|', 'options'); ?>",
      \         'tsf':  "<?php the_sub_field('|'); ?>",
      \         'if':   "<?php if(|${child}): ?>",
      \         'hr':   "<?php if( have_rows('${cursor}', 'option') ): ?>\n\t<?php while( have_rows('${cursor}', 'option')): the_row(); ?>\n\t${2}\n\t<?php endwhile; ?>\n<?php endif; ?>",
      \         'els':  "<?php elseif(|): ?>",
      \         'wh':   "<?php while(|${child}): ?>",
      \         'ei':   "<?php endif; ?>",
      \         'ew':   "<?php endwhile; ?>",
      \         'echo': "<?php echo |; ?>",
      \         },
      \     },
      \ }
let g:user_emmet_leader_key = '\'
" autocmd FileType stylus,html,css,less,sass,scss imap <buffer><expr><C-Space> <sid>cw#zen_html_tab()
autocmd FileType {ht,x,xs}ml,php,pug,s\\\{-\}[ac]ss,less,stylus imap <buffer><expr> <C-Space> emmet#expandAbbrIntelligent("\<C-Space>")
" autocmd FileType stylus,html,css,less,sass,scss imap <buffer><expr> <tab> emmet#expandAbbrIntelligent("\<tab>")
"}}}3
Plug 'nathanaelkane/vim-indent-guides' "{{{3
" <leader>ig
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_color_change_percent=3
if !has('gui_running')
  let g:indent_guides_auto_colors=0
  function! s:indent_set_console_colors()
    hi IndentGuidesOdd ctermbg=235
    hi IndentGuidesEven ctermbg=236
  endfunction
  autocmd VimEnter,Colorscheme * call s:indent_set_console_colors()
endif
" }}}3
Plug 'junegunn/vim-easy-align', { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] } "{{{3
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
xmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap <Leader>a <Plug>(EasyAlign)
" }}}3
Plug 'ctrlpvim/ctrlp.vim' "{{{3
nnoremap <leader>b :CtrlPBuffer<cr>
nnoremap <Leader>o :CtrlPMRUFiles<CR>
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'
Plug 'mhinz/vim-startify' "{{{3
nnoremap <F1> :Startify<CR>
let g:startify_list_order = ['files', 'sessions', 'bookmarks']
let g:startify_bookmarks = [
      \ {'o': '~\prostor.todo.md'},
      \ {'p': 'D:\Dropbox\TODO\PROSTOR.todo'},
      \ {'r': '~\_vimrc'}, {'t': '~\onetab.txt'} ]
let g:startify_update_oldfiles = 1
let g:startify_session_autoload = 1
let g:startify_session_persistence = 1
let g:startify_session_delete_buffers = 1
"}}}3
Plug 'rking/ag.vim', {'on' :'Ag'}
" 2017-03-13 [ ultisnips ] {{{3
" Track the engine.
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
" Snippets are separated from the engine. Add this if you want them: Plug 'honza/vim-snippets'
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
"}}}3
" * * * * *
" -- open url in browser -- {{{3
Plug 'kana/vim-textobj-user'
Plug 'jceb/vim-textobj-uri'
Plug 'tyru/open-browser.vim'
" }}}3
" -- parenthesis -- {{{3
" Plug 'Raimondi/delimitMate'
"   let delimitMate_expand_cr = 1
" Plug 'jiangmiao/auto-pairs' " overrides cyrilic letters on [ and ]
" Plug 'junegunn/rainbow_parentheses.vim'
Plug 'luochen1990/rainbow'
" let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
Plug 'matchit.zip'
let b:match_ignorecase = 1
Plug 'tpope/vim-surround'
Plug 'tpope/vim-endwise'
Plug 'rstacruz/vim-closer' " 2017-04-14
"}}}3
" -- hotkeys {{{3
Plug 'tpope/vim-rsi'
" Plug 'romainl/vim-qf'
Plug 'tpope/vim-unimpaired'
" -- repeat {{{3
Plug 'tpope/vim-repeat'
" Plug 'kana/vim-repeat'
" -- comment {{{3
Plug 'tomtom/tcomment_vim'
" Plug 'tpope/vim-commentary'
" Plug 'tyru/caw.vim'
"   let g:caw_operator_keymappings = 1
" }}}3
" -- text objects -- {{{3
Plug 'kana/vim-textobj-user' " <- dependency!
Plug 'kana/vim-textobj-fold'
Plug 'kana/vim-textobj-function'
Plug 'kana/vim-textobj-indent'
Plug 'jasonlong/vim-textobj-css', {'for': ['css', 'scss', 'less']}
" }}}3
" -- gist-vim {{{3
Plug 'mattn/gist-vim' | Plug 'mattn/webapi-vim'
" }}}3
" -- utils -- {{{3
Plug 'justinmk/vim-dirvish' "doesn't work with autochdir
Plug 'skywind3000/asyncrun.vim' ", {'on':['Gulp','GulpExt']}
Plug 'mbbill/fencview', {'on' : 'FencAutoDetect'}
Plug 'tpope/vim-fugitive'
Plug 'justinmk/vim-sneak'
let g:sneak#streak=1
Plug 'konfekt/fastfold'
let g:fastfold_savehook = 1
" ST's PlainTasks compatible!
Plug 'irrationalistic/vim-tasks'
" == < webdev \> == {{{2
" General
" Replaced with [ poliglot ] {{{3
" Plug 'othree/html5.vim',       {'for': ['html', 'php', 'tpl']}
" Plug 'JulesWang/css.vim',      {'for': ['css', 'html', 'scss', 'sass', 'less']}
" }}}3
Plug 'hail2u/vim-css3-syntax', {'for': ['css','html','scss','sass','less']}
Plug 'closetag.vim',           {'for': ['html', 'php', 'tpl']}
" ---------------
" Pre HTML
" Plug 'digitaltoad/vim-pug', {'for': ['jade','pug']} " replaced with [ polyglot ] {{{3
" Plug 'tpope/vim-markdown', {'for': ['markdown', 'md', 'mdown', 'mkd', 'mkdn']}
" }}}3
" ---------------
" Pre CSS
" replaced with [ polyglot ] {{{3 "
" Plug 'cakebaker/scss-syntax.vim', {'for': ['sass', 'scss']}
" Plug 'groenewege/vim-less', { 'for': 'less' }
" Plug 'wavded/vim-stylus', {'for': ['styl', 'stylus']}
" }}} replaced with [ polyglot ] "
" 2017-04-14
Plug 'rstacruz/vim-hyperstyle' "requires python27
" ---------------
" Post CSS
Plug 'csscomb/vim-csscomb', {'on': 'CSScomb'}
" 2017-04-17
Plug 'stephenway/postcss.vim'
" ---------------
" Js
" replaced with [ polyglot ] {{{3 "
" Plug 'pangloss/vim-javascript', { 'for': ['javascript', 'js', 'html'] }
" Plug 'elzr/vim-json', { 'for': ['json', 'javascript', 'js', 'html'] }
" Plug 'moll/vim-node', {'for': [ 'js', 'javascript' ]} " 2017-03-09
" }}} replaced with [ polyglot ] "
let g:vim_json_syntax_conceal = 0
" 2017-02-06
Plug 'ternjs/tern_for_vim', {'for': [ 'js', 'javascript' ]}
let g:tern_map_keys = 1
Plug 'itspriddle/vim-jquery', {'for': [ 'js', 'js.jquery', 'javascript' ]}
" ---------------
Plug 'KabbAmine/gulp-vim', {'on': ['Gulp','GulpExt']}
Plug 'gko/vim-coloresque', {'for': ['html', 'css', 'less', 'sass', 'stylus', 'php']} " *^* This
" Plug 'ap/vim-css-color', {'for': ['html', 'css', 'less', 'php']} " Trying *^* instead of this colorizer

" == new stuff == {{{2
Plug 'vim-jp/syntax-vim-ex' " for vim 8.0 syntax
Plug 'mattn/ctrlp-swoop'
" 2017-06-30 [ polyglot ] {{{3
Plug 'sheerun/vim-polyglot'
" 2017-06-26 [ php indenting ] {{{3
Plug '2072/PHP-Indenting-for-VIm'
" 2017-06-23 [ md todo ] {{{3
Plug 'rlue/vim-getting-things-down'
" 2017-06-22 [ splitjoin ] {{{3
Plug 'AndrewRadev/splitjoin.vim'
let g:splitjoin_split_mapping = 'cx'
let g:splitjoin_join_mapping  = 'cv'
" 2017-06-07 [ vim-searchindex | vim-hier | vim-agrep ] {{{3
Plug 'google/vim-searchindex' " very cool
Plug 'jceb/vim-hier'
Plug 'osyo-manga/vim-agrep'
" 2017-05-25 [denite] {{{3
" Plug 'Shougo/denite.nvim'
" 2017-05-23 [ gutentags ] {{{3
Plug 'ludovicchabant/vim-gutentags'
let g:gutentags_ctags_exclude=['node_modules', './**/node_modules/']
" 2017-05-22 [ scratch.vim ] {{{3
Plug 'mtth/scratch.vim'
" 2017-05-18 [ asyncomplete.vim ] {{{3
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'yami-beta/asyncomplete-omni.vim'
Plug 'prabirshrestha/asyncomplete-tags.vim'
Plug 'prabirshrestha/asyncomplete-ultisnips.vim'
Plug 'prabirshrestha/asyncomplete-emoji.vim'
Plug 'prabirshrestha/asyncomplete-buffer.vim'
" call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
"     \ 'name': 'buffer',
"     \ 'whitelist': ['*'],
"     \ 'blacklist': ['go'],
"     \ 'completor': function('asyncomplete#sources#buffer#completor'),
"     \ }))
" call asyncomplete#register_source(asyncomplete#sources#emoji#get_source_options({
"     \ 'name': 'emoji',
"     \ 'whitelist': ['*'],
"     \ 'completor': function('asyncomplete#sources#emoji#completor'),
"     \ }))
" call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
"         \ 'name': 'ultisnips',
"         \ 'whitelist': ['*'],
"         \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
"         \ }))
" call asyncomplete#register_source(asyncomplete#sources#tags#get_source_options({
"     \ 'name': 'tags',
"     \ 'whitelist': ['c'],
"     \ 'completor': function('asyncomplete#sources#tags#completor'),
"     \ }))
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
      \ 'name': 'omni',
      \ 'whitelist': ['*'],
      \ 'completor': function('asyncomplete#sources#omni#completor')
      \  }))
let g:asyncomplete_auto_popup = 0

" 2017-05-17 [supertab] {{{3
Plug 'ervandew/supertab'
" 2017-04-26 [ wordpress.vim ? ] {{{3
" I'm not sure what it is doing.
" It seems it doesn't work, disabling 2017-07-07
" Plug 'dsawardekar/wordpress.vim'
" 2017-03-31 [ fzf ] {{{3
Plug 'junegunn/fzf', { 'dir': '~\.fzf'} | Plug 'junegunn/fzf.vim'
nmap <leader><tab> <plug>(fzf-maps-n)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-l> <plug>(fzf-complete-line)
" fzf + ripgrep config {{{4
" https://elliotekj.com/2016/10/30/using-ripgrep-and-fzf-instead-of-the-silver-searcher-and-ctrlp-in-vim/
" --column: Show column number
" --line-number: Show line number
" --no-heading: Do not show file headings in results
" --fixed-strings: Search term as a literal string
" --ignore-case: Case insensitive search
" --no-ignore: Do not respect .gitignore, etc...
" --hidden: Search hidden files and folders
" --follow: Follow symlinks
" --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
" --color: Search color options
" command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1, <bang>0)
command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
" let g:fzf_launcher = 'cmd.exe /c %CMDER_INSTALL_DIR%\Cmder.exe /START "%v"'
" Let’s take a look at those flags:
" --files: Makes ripgrep print each file that would be searched, but prevents
"  ripgrep from actually searching it.
" --hidden: Makes ripgrep search hidden directories and files.
" --smartcase: Makes ripgrep search case-insensitively if the pattern is all
"  lowercase, however if there is a capital the search becomes case-sensitive.
" --glob: (with an exclamation mark) makes ripgrep ignore directories matching
"  the passed patterns. In this case, we want to ignore the .git folder.
" One flag that I haven’t included, but which you may want to use is
" --no-ignore, which will tell ripgrep to search files and directories listed in
"  .gitignore, .ignore, etc. By default, files that are set to be ignored in
"  those files are ignored by ripgrep.
" 2017-03-21 [ hardtime ] {{{3
Plug 'takac/vim-hardtime'
nnoremap <leader><F1> <Esc>:HardTimeToggle<CR>
let g:hardtime_ignore_quickfix = 1
" 2017-02-22 [ showmap ] {{{3
Plug 'fcpg/vim-showmap'
" 2017-02-06 [ ale ] {{{3
Plug 'w0rp/ale'
" let g:ale_lint_on_save = 1
" let g:ale_lint_on_text_changed = 0
let g:ale_statusline_format = [' ✖ %d ', ' ! %d ', '']
" }}}3
" 2017-07-07 [ clever-f ] {{{3
Plug 'rhysd/clever-f.vim'
" }}}3
" == old == {{{2
Plug 'vim-scripts/DrawIt', {'on': 'DrawIt'}
Plug 'wellle/targets.vim' " TODO: learn how to use it effectivly. Test string below:
" an avesome ( and really complex (though not really) but neat) 'string'!
" and another one test string for fun and [many] profit(s)!
" == unused == {{{2
" Plug 'kana/vim-operator-user'
" Plug 'samsonw/vim-task'
" Plug 'osyo-manga/vim-trip'
" Plug 'osyo-manga/vim-over'
" Plug 'osyo-manga/vim-jplus'
" Plug 'dbmrq/vim-chalk'
" Plug 'fisadev/FixedTaskList.vim'
" Plug 'mattn/benchvimrc-vim'

" == Colorschemes == {{{2
" -- utilitiy -- {{{3
Plug 'vim-scripts/ScrollColors', { 'on': 'SCROLLCOLOR' }
" Plug 'guns/xterm-color-table.vim', {'on': 'XtermColorTable'}
" Plug 'vim-airline/vim-airline'
" Plug 'vim-airline/vim-airline-themes'
" -- * * * --- {{{3
Plug 'sickill/vim-monokai' " 2017-03-09 [ monokai ]
Plug 'rakr/vim-one'
Plug 'ajmwagar/vim-deus'
Plug 'sonjapeterson/1989.vim'
Plug 'ajh17/Spacegray.vim'
Plug 'fneu/breezy'
Plug 'kristijanhusak/vim-hybrid-material'
" let g:airline_theme = "hybrid"
" Plug 'jasonlong/lavalamp'
Plug 'amadeus/vim-evokai'
Plug 'jacoborus/tender'
Plug 'junegunn/seoul256.vim'
" -- * * * * -- {{{3
Plug 'KabbAmine/yowish.vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'chriskempson/base16-vim'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'dracula/vim'
" -- * * * * * -- {{{3
Plug 'nanotech/jellybeans.vim'
Plug 'sjl/badwolf'
Plug 'tomasr/molokai'
Plug 'zeis/vim-kolor'
let g:kolor_underlined=1
" -- newest themes -- {{{3
Plug 'Wutzara/vim-materialtheme'
Plug 'zanglg/nova.vim'
Plug 'google/vim-colorscheme-primary'
Plug 'ericbn/vim-solarized'
"}}}3
call plug#end() " required }}}1

" -- theme assignment --
let g:cs_wingui = 'dracula'
let s:cs_xterm  = 'jellybeans'
let s:cs_nvim   = 'molokai'
let s:cs_cmder  = 'badwolf'

" General {{{2
" scriptencoding utf-8
set timeout timeoutlen=230

set iskeyword=@,a-z,A-Z,48-57,_,128-175,192-255
set keymap=russian-jcukenwin
set iminsert=0              " раскладка по умолчанию для ввода - английская
set imsearch=0              " раскладка по умолчанию для поиска - английская

set mouse=a
set autoread
set hidden                  " Allow buffer switching without saving
set path+=**                " doesn't work well in Windows, laggy
set synmaxcol=800           " Don't try to highlight lines longer than 800 chars

" Better Completion
set complete=.,w,b,u,t
set completeopt=longest,menuone
"}}}2

" Formatting {{{2

if has('virtualedit')
  " allow cursor to move where there is no text in visual block mode
  set virtualedit=block
endif

set formatoptions=qrn1j
set formatoptions+=M
" set formatoptions-=t           " don't automatically wrap text when typing
" set formatoptions+=j           " Delete comment character when joining commented lines

set backspace=indent,eol,start " Backspace for dummies
set nowrap
set textwidth=0                " Don't automatically insert linebreaks
set autoindent
set shiftround
set smarttab
set noexpandtab
set tabstop=4                  " размер табов
set softtabstop=4
set shiftwidth=4               " размер отступов
set linebreak
let &showbreak='▷ '            " Iosevka doesn't has above symbol
if !s:is_prostor
  let &showbreak='↪ '
endif
set breakindent
set nojoinspaces               " Prevents inserting two spaces after punctuation on a join (J)

" }}}2

" UI {{{2

set colorcolumn=+1
set cmdheight=2
set noeb
set lazyredraw
set scrolloff=3                                      " Minimum lines to keep above and below cursor
set scrolljump=5                                     " Lines to scroll when cursor leaves screen
set shortmess=amroOtT                                " a doesn't add m and r despite what docs says
set cursorline
set number                                           " Line numbers on
set relativenumber
set showmatch                                        " Show matching brackets/parenthesis
set matchtime=2                                      " tens of a second to show matching parentheses
set incsearch                                        " Find as you type search
set nohlsearch                                       " Highlight search terms; it's annoying and distracting, turning it off - 2016-12-15:
set winminheight=0                                   " Windows can be 0 line high
set ignorecase                                       " Case insensitive search
" set infercase                                        " https://bluz71.github.io/2017/05/15/vim-tips-tricks.html
set smartcase                                        " Case sensitive when uc present
set wildmenu                                         " Show list instead of just completing
set wildmode=list:longest,full                       " Command <Tab> completion, list matches, then longest common part, then all.
set wildignore+=node_modules/**,*/.git/*,*/tmp/*,*.swp
set foldenable                                       " Auto fold code

set list
set listchars=tab:│\ ,eol:¬,trail:•,extends:#,nbsp:⋅ " Highlight problematic whitespace
" set listchars=tab:›\ ,trail:•,extends:#,nbsp:⋅ " Highlight problematic whitespace
" set listchars=tab:▷⋅,trail:⋅,nbsp:⋅            " Alternative settings

set splitright                                 " Puts new vsplit windows to the right of the current
set splitbelow                                 " Puts new split windows to the bottom of the current

" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set showtabline=1
catch
endtry

" netrw
let g:netrw_altv=1                             " open splits to the right
let g:netrw_banner=0
let g:netrw_browse_split = 4
" liststyle=3 has problems
" let g:netrw_liststyle=2
let g:netrw_silent = 1
let g:netrw_winsize = 25

" set shortmess+=filmnrxoOtT                     " Abbrev. of messages (avoids 'hit enter')
" set foldopen=all                               " Автооткрытие сверток при заходе в них
" set whichwrap=b,s,h,l,<,>,[,]                  " Backspace and cursor keys wrap too
" execute " set colorcolumn=".join(range(80,335), ',')|   "Discolor every column past column 80

" /UI }}}2

" Statusline {{{1
set laststatus=2
" Powerline symbols quick ref:
"  > Triangle U+e0b0,  > U+e0b1,  < Triangle U+e0b2,
"  < U+e0b3,  Git U+e0a0,  LN U+e0a1,  Lock U+e0a2
set statusline=
set statusline+=\ %n
set statusline+=%{v:this_session!=''?'\ \ '.fnamemodify(this_session,':t'):''}
set statusline+=\ \ %<%.42F\ %{cw#ReadOnly()}
set statusline+=\ %=
set statusline+=\ %8*%k%r%w%m%0*
set statusline+=\ \ %{&ft}
set statusline+=%{&fenc!=?'utf-8'?'\ \ ['.&fenc.']':''}
set statusline+=%{&ff!=?'unix'?'\ \ ['.&ff.']':''} " Fileformat
set statusline+=\ \\ %-3(%{cw#FileSize()}%)     " File size
set statusline+=%8*%3c:%3l/%L
set statusline+=\ %*
" ========================================
"display a warning if &et is wrong, or we have mixed-indenting
set statusline+=%#error#
set statusline+=%{ALEGetStatusLine()}
set statusline+=%{cw#StatuslineTabWarning()}
set statusline+=%{cw#StatuslineTrailingSpaceWarning()}
set statusline+=%{gutentags#statusline()}
set statusline+=%*

" from http://twily.info/.vimrc#view {{{2
" set statusline=\ %{cw#HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

" }}}1

" Terminal settings {{{1
set vb t_vb=
" set ttimeout ttimeoutlen=50
" neovim {{{2
if g:is_nvim
  " let s:editor_root=expand("~/AppData/Local/nvim")
  let g:python_host_prog = 'D:/env/neovim/2/Scripts/python.exe'
  let g:python3_host_prog = 'D:/env/neovim/3/Scripts/python.exe'
  if exists('g:GuiFont')
    " WTF?! Doesn't work?
    " let g:Guifont="DejaVu Sans Mono for Powerline:h13"

    " Works and even looks nice, however reports bad fixed pitch metrics
    " Also it's risky to install patched version on Windows
    " GuiFont Consolas:h12

    " Warning: bad fixed pitch metrics?!
    " GuiFont Anonymice Powerline:h12

    "is not fixed pitch font?!
    " GuiFont Arimo for Powerline:h12
    " GuiFont DejaVu Sans Mono for Powerline:h13
    " GuiFont Literation Mono Powerline:h12
    " GuiFont Roboto Mono for Powerline:h13
    " GuiFont Tinos for Powerline:h12

    " Sluggish unaliased look
    " GuiFont Droid Sans Mono for Powerline:h12
    " GuiFont Fira Mono Medium for Powerline:h12

    " A little better look than Droid Sans and Fira
    " GuiFont monofur for Powerline:h14

    " Unknown font
    " GuiFont Ubuntu Mono derivative Powerline:h12
  endif
  execute 'colorscheme '.g:cs_nvim
endif " }}}2
" ConEmu terminal settings {{{2
if g:is_conemu
  " it's already set above
  " set vb t_vb=
  set term=xterm
  set termencoding=utf8
  set t_Co=256
  let &t_AB="\e[48;5;%dm"
  let &t_AF="\e[38;5;%dm"
  execute 'colorscheme '.s:cs_cmder
endif
" }}}2
" Disable Background Color Erase (BCE) so that color schemes
" render properly when inside 256-color tmux and GNU screen.
if &term =~ '256color'
  set t_ut=
endif

"}}}

" Autocommands {{{1
if has("autocmd")
  " augroup leave_insert_mode " {{{2 [ disabled ]
  "   au!
  "   autocmd FocusLost,TabLeave * call feedkeys("\<C-\>\<C-n>") | :wa
  " augroup END
  augroup auto_save_and_read " {{{2
    autocmd!
    autocmd TextChanged,InsertLeave,FocusLost * silent! wall
    autocmd CursorHold * silent! checktime
  augroup END
  " PHP_stuff {{{2
  function! SetClosetagPHP()
    if exists('g:closetag_filenames')
      let g:closetag_filenames.= ",*.php,*.tpl"
    endif
  endfunction

  augroup PHP_stuff
    autocmd!
    autocmd FileType php,smarty,tpl call SetClosetagPHP()
    autocmd FileType smarty,tpl setlocal commentstring=<!--\ %s\ -->
  augroup END
  augroup indent_tag " {{{2
    au!
    au FileType html,jinja,htmldjango nnoremap <buffer> <localleader>= Vat=
  augroup end

  augroup statusline_tab_warning " {{{2
    autocmd!
    "recalculate the tab warning flag when idle and after writing
    autocmd cursorhold,bufwritepost * unlet! b:statusline_tab_warning
    "recalculate the trailing whitespace warning when idle, and after saving
    autocmd cursorhold,bufwritepost * unlet! b:statusline_trailing_space_warning
  augroup end
  augroup active_relative_number " {{{2
    autocmd!
    autocmd WinEnter * :setlocal number relativenumber
    autocmd WinLeave * :setlocal norelativenumber
  augroup END
  augroup reload_vimrc " {{{2
    autocmd!
    autocmd BufWritePost ?vimrc,init.vim nested source $MYVIMRC
    " autocmd bufwritepost ._vimrc,init.vim,vimrc nested source $MYVIMRC
    " autocmd bufwritepost $HOME/_vimrc execute "normal! :source ~/_vimrc"
  augroup END
  augroup Python_skeleton "{{{2
    autocmd!
    autocmd BufNewFile *.py[w]\\\{-\} call cw#SkeletonPY()
  augroup END
  " Return to last edit position when opening files (You want this!) {{{2
  augroup thaw_file
    autocmd!

    autocmd BufReadPost *
          \ if line("'\"") > 0 && line("'\"") <= line("$") |
          \ exe "normal! g`\"" |
          \ endif
  augroup END
  " Remember info about open buffers on close
  set viminfo^=%

endif " }}}1

" Mappings {{{1 THIS IS CHAOS!!1
" = #icantlivewithoutyou = {{{2
" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
" Revert with ":iunmap <C-U>".
inoremap <C-U> <C-G>u<C-U>

" = Moving around = {{{2
" Easier horizontal scrolling
map zl zL
map zh zH

" screen line scroll - very useful with wrap on
" nnoremap <silent> j gj
" nnoremap <silent> k gk
" https://bluz71.github.io/2017/05/15/vim-tips-tricks.html
nnoremap <expr> j v:count ? (v:count > 5 ? "m'" . v:count : '') . 'j' : 'gj'
nnoremap <expr> k v:count ? (v:count > 5 ? "m'" . v:count : '') . 'k' : 'gk'

" auto center {{{3
" nnoremap <silent> n nzz
" nnoremap <silent> N Nzz
" Keep search matches in the middle of the window. + unfolds
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz
nnoremap <silent> <C-o> <C-o>zz
nnoremap <silent> <C-i> <C-i>zz
"}}}3

inoremap <C-l> <right>

" Same when jumping around
nnoremap g; g;zz
nnoremap g, g,zz
nnoremap <c-o> <c-o>zz

" Comfy warm fluffy and lampy parenthesis jumping
nnoremap á %
vnoremap á %
nnoremap <M-a> %
vnoremap <M-a> %

noremap H ^
noremap L g_
nnoremap gl L
nnoremap gh H

" = Quality of life = {{{2

" Yank and Paste {{{3
" Yank from the cursor to the end of the line, to be consistent with C and D.
" easy paste
inoremap <C-q> <C-r><C-p>+
nnoremap Y y$
" fast copy-paste
noremap <Leader>y "+y
noremap <leader>Y "+y$
noremap <leader>p :set paste<cr>"+]p:set nopaste<cr>
noremap <leader>P :set paste<cr>"+[p:set nopaste<cr>

" URL opening :\ {{{3
" https://sts10.github.io/blog/2016/02/16/one-solution-to-a-problem-with-vims-gx-command/
nnoremap <silent> gx :normal viugx<CR>
nmap gk <Plug>(openbrowser-smart-search)
vmap gk <Plug>(openbrowser-smart-search)

" Insert date on <F8> and <S-F8> {{{3
nnoremap <F8> i<C-R>=strftime("%Y-%m-%d")<CR><Esc>
inoremap <F8> <C-R>=strftime("%Y-%m-%d")<CR>
vnoremap <F8> da<C-R>=strftime("%Y-%m-%d")<CR><Esc>
nnoremap <S-F8> i<C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR><Esc>
inoremap <S-F8> <C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR>
vnoremap <S-F8> da<C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR><Esc>

" sane regex {{{3
nnoremap / /\v
vnoremap / /\v
nnoremap ? ?\v
vnoremap ? ?\v
nnoremap :s/ :s/\v
"}}}3

" reselect visual block after indent #superuseful
vnoremap < <gv
vnoremap > >gv

" Select (charwise) the contents of the current line, excluding indentation.
" Great for pasting Python lines into REPLs.
nnoremap vv ^vg_


" Unfuck my screen
nnoremap <leader>R :syntax sync fromstart<cr>:redraw!<cr>
" Allow using the repeat operator with a visual selection (!)
" http://stackoverflow.com/a/8064607/127816
vnoremap . :normal .<CR>

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>
" Current file name to clipboard
nnoremap <leader>cp :let @+ = expand("%:p")<CR>

" = <s>RIP AND TEAR!</s> Split and join = {{{3
" Join an entire paragraph.
" Useful for writing GitHub comments in actual Markdown
" and then translating it to their bastardized version of Markdown.
nnoremap <leader>J mzvipJ`z
" Keep cursor line in place when joining lines
nnoremap J mzJ`z

" Sneaky new line
nnoremap <silent> <M-j> m`o<ESC>``
nnoremap <silent> <M-k> m`O<ESC>``
" Handy line split: before and after cursor
" fallback maps if Alt won't work
nnoremap <silent> <leader>j m`o<ESC>``
nnoremap <silent> <leader>k m`O<ESC>``
nnoremap <silent> <C-CR> o<ESC>
nnoremap <silent> <S-CR> O<ESC>
inoremap <silent> <S-CR> <ESC>O
" unimpaired-style, not as sleek as above
" ...or maybe you motherfucker just increase the ttimeoutlen?
nnoremap [<CR> m`i<CR><ESC>``
nnoremap ]<CR> m`a<CR><ESC>``

nnoremap K m`a<CR><ESC>``
" help me obi vim kenobi...
nnoremap <S-F12> K

" = Seek and destroy = {{{3
" vimgrep my last search
nnoremap <silent> <leader><F3> :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>
" from http://twily.info/.vimrc#view {{{3
" Open vimgrep and put the cursor in the right position
map <leader>g :vimgrep // **/*.*<left><left><left><left><left><left><left>
" Vimgreps in the current file
map <leader>/ :vimgrep // <C-R>%<C-A><right><right><right><right><right><right><right><right><right>
" bind K to grep word under cursor
nnoremap <M-K> :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" = WTF?!! = {{{2
xnoremap @ :<C-u>call cw#ExecuteMacroOverVisualRange()<CR>

nnoremap <M-space> :call UltiSnips#ExpandSnippet()<CR>
inoremap <M-space> <C-R>=UltiSnips#ExpandSnippet()<CR>
" Substitute
" nnoremap <c-s> :s/
" nnoremap <M-s> :%s/
" vnoremap <c-s> :s/

" echo highligting groups
nnoremap <F7> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
      \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
      \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
" Browse current dir
nnoremap <silent> <F11> :silent edit <C-R>=empty(expand('%')) ? '.' : fnameescape(expand('%:p:h'))<CR><CR>

" Meta keys test {{{3
" works in terminal:
map <M-F5> :echo 'whoa f5'<cr>
" doesn't work in terminal:
" ==============================
map <silent> <M-1> :echo 'whoa1'<cr>
map <M-`> :echo 'cool!'<cr>
" map <M-space> :echo 'lol i can map it'<cr>
nnoremap <C-@> :echo 'heyheyhey'<cr>
map <C-k5> :echo 'yup:c5'<cr>

" =============== }}}3
" from Konfekt's leader key post
" nnoremap : ,
" nnoremap , :
" }}}2 /wtf...
" = -- UI -- = {{{2
" Update!
nnoremap <leader>w :up<cr>
" toggle little nifty symbols
nnoremap <leader><BS> :set list! list?<cr>

" <F#> keys: {{{3
nnoremap <F2> :Vex<CR>
nnoremap <F4> :set hlsearch! hlsearch?<cr>
" Word-wrap toggle
nnoremap <F6> :setl wrap!<bar>:set wrap?<CR>
imap <F6> <C-O><F6>
map <F9> :call cw#SetRandomColors()<CR>
" toggle paste
noremap <F12> :setl invpaste<CR><bar>:set paste?<CR>

" [sensible.vim] Use <C-L> [backspace] to clear the highlighting of :set hlsearch.
" actually useful but i switched to :nohl
if maparg('<BACKSPACE>', 'n') ==# ''
  nnoremap <silent> <BACKSPACE> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><BACKSPACE>
endif

nnoremap <silent> <leader>r :call cw#Cycle_numbering()<CR>
nnoremap <leader><F11> :so $MYVIMRC<CR> :echo "* .vimrc loaded *"<CR>
nnoremap <Leader><F12> :tabnew $MYVIMRC<CR>
" Display all lines with keyword under cursor and ask which one to jump to
nmap <Leader>ff [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>

" Buffers {{{3
" quick buffer open
nnoremap gb :ls<CR>:b<space>
nnoremap <leader><leader> <C-^>

" window killer
nnoremap <silent> Q :call cw#CloseWindowOrKillBuffer()<cr>
" buffer killer: open next and kill previous
" nnoremap <leader>q :bn<bar>sp<bar>bp<bar>bd<cr>
" much simpler version than above (requires at least 2 buffers)
nnoremap <leader>bd :b#\|bd#<CR>
" nnoremap <leader>Q :b#<bar>bd#<cr>

" shortcuts for windows {{{3
nnoremap <leader>= <C-w>=
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>s <C-w>s
nnoremap <leader>vsa :vert sba<cr>
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" Split resize
map <M-.> 4<C-W><
map <M-,> 4<C-W>>
map <M-=> <C-w>+
map <M--> <C-w>-

" shortcuts for tabs {{{3
map <leader>tn :tabnew<CR>
map <leader>tc :tabclose<CR>
nnoremap <up> :tabnext<CR>
nnoremap <down> :tabprev<CR>

" formatting shortcuts
nmap <leader>f; :call cw#Preserve("%s/;\$//g")<CR>
nmap <leader>f= :call cw#Preserve("normal gg=G")<CR>
nmap <leader>f4 :call cw#Preserve("%s/\\s\\+$//e")<CR>
nmap <expr> <leader>f5 ':%s/' . @/ . '//g<LEFT><LEFT>'
nmap <expr> <leader>f3 ':%s///g<LEFT><LEFT><LEFT>'
nmap <expr> <F3> ':g//#<LEFT><LEFT>'
vmap <leader>s :sort<cr>
" Easier formatting
nnoremap <silent> <leader>fq :call cw#Preserve("normal gwip")<CR>


" folds {{{3
nnoremap zr zr:echo 'foldlevel: ' . &foldlevel<cr>
nnoremap zm zm:echo 'foldlevel: ' . &foldlevel<cr>
nnoremap zR zR:echo 'foldlevel: ' . &foldlevel<cr>
nnoremap zM zM:echo 'foldlevel: ' . &foldlevel<cr>
" show me only THIS fold #icantlivewithoutthis
nnoremap <leader>z zMzvzz
" too radikal4me!!1
" nnoremap zj :<C-u>silent! normal! zc<CR>zjzo
" nnoremap zk :<C-u>silent! normal! zc<CR>zkzo[z
" }}}3

" reselect last paste ( not working recently? )
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

" = language switching = {{{2
nmap <M-z> a<C-^><Esc>
if !s:is_gui
  " lang switch terminal edition
  nmap <C-Space> a<C-^><Esc>
  vmap <silent> <C-Space> <Esc>a<C-^><Esc>gv
endif
" }}}2
" | III -- Rare -- {{{2     |
"==============================
" consistent menu navigation
" https://github.com/jasonlong/dotfiles/blob/master/vimrc
" }}}2
" }}}1
if !s:is_prostor
  if executable("ag")
    set grepprg=ag\ --nogroup\ --nocolor\ --ignore-case\ --vimgrep
    set grepformat^=%f:%l:%c:%m
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    if s:is_windows
      " fix for windows:
      let g:ctrlp_user_command = 'ag -l --nocolor -g "" %s'
    endif
    let g:ctrlp_use_caching = 0
  endif
else
  if executable("rg")
    set grepprg=rg\ --vimgrep\ --color=never
    " \ --smartcase
    let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
    let g:ctrlp_use_caching = 0
  endif
endif

