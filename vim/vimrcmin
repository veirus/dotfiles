" a minimal .vimrc
set nocompatible
" romainl (and help) says it's not needed if you have
" vimrc in expected location... Hmmmm...
" requres manual setting when trying vim -u NONE (or any other config)
"==================================================
let g:is_windows = has('win32') || has('win64')
let g:is_cygwin  = has('win32unix')
let g:is_macvim  = has('gui_macvim')
let g:is_nvim    = has('nvim')
let g:is_nyaovim = exists('g:nyaovim_version')
let g:is_gui     = has('gui_running')
let g:is_conemu  = !empty($conemubuild)
"==================================================
let g:cs_wingui='despacio'
let g:cs_xterm='papercolor'
let g:cs_nvim='papercolor'
let g:cs_cmder='papercolor'
"==================================================
" packadd! matchit
"==================================================
" maps {{{
"=========
" https://konfekt.github.io/blog/2016/10/03/get-the-leader-right
nnoremap : ,
nnoremap , :
"==================================================
map q :bd<cr>
nnoremap <f5> :up<cr>:so $myvimrc<cr>
inoremap <c-l> <right>
vnoremap . :normal .<cr>
"==================================================
map Y y$
noremap <leader>y "+y
noremap <leader>Y "+y$
"==================================================
" when pasting from clipboard toggle the paste feature and use the indent
" adjusted paste ]p and ]p. this prevents breaking of alignment when pasting
" in code from websites and etc..
noremap <leader>p :set paste<cr>"+]p:set nopaste<cr>
noremap <leader>P :set paste<cr>"+[p:set nopaste<cr>
"==================================================
" splitting lines
nnoremap <silent> <leader><cr> i<cr><esc>
nnoremap <silent> <leader>j a<cr><esc>k$
nnoremap <silent> <leader>o m`o<esc>``
nnoremap <silent> <leader>O m`O<esc>``
"==================================================
" reselect visual block after indent
xnoremap < <gv
xnoremap > >gv
"==================================================
" screen line scroll - very useful with wrap on
nnoremap <silent> j gj
nnoremap <silent> k gk
nnoremap gk k
nnoremap gj j
"==================================================
" easier horizontal scrolling
map zl zl
map zh zh
"==================================================
" folds {{{
nnoremap zr zr:echo 'foldlevel: ' . &foldlevel<cr>
nnoremap zm zm:echo 'foldlevel: ' . &foldlevel<cr>
nnoremap zr zr:echo 'foldlevel: ' . &foldlevel<cr>
nnoremap zm zm:echo 'foldlevel: ' . &foldlevel<cr>
" }}}
" insert date on <f3> and <s-f3> {{{
nnoremap <f3> i<c-r>=strftime("%y-%m-%d")<cr><esc>
inoremap <f3> <c-r>=strftime("%y-%m-%d")<cr>
vnoremap <f3> di<c-r>=strftime("%y-%m-%d")<cr><esc>
nnoremap <s-f3> i<c-r>=strftime("%y-%m-%d %a %i:%m %p")<cr><esc>
inoremap <s-f3> <c-r>=strftime("%y-%m-%d %a %i:%m %p")<cr>
vnoremap <s-f3> di<c-r>=strftime("%y-%m-%d %a %i:%m %p")<cr><esc>
" }}}
"==================================================
" quick buffer open
nnoremap <leader>b :ls<cr>:b<space>
nnoremap <leader>h :bprev<cr>
nnoremap <leader>l :bnext<cr>
"==================================================
nnoremap <f4> :set hlsearch! hlsearch?<cr>
nnoremap <f6> :setl wrap!<bar>:set wrap?<cr>
inoremap <f6> <c-o><f6>
noremap <f12> :set invpaste<cr>:set paste?<cr>
nnoremap <leader><leader> <c-^>
nnoremap <leader>w :w<cr>
nnoremap <leader><bs> :set list! list?<cr>
nnoremap <leader><f11> :so $myvimrc<cr> :echo "* .vimrc loaded *"<cr>
nnoremap <leader><f12> :vsp $myvimrc<cr>
"==================================================
" preserve by jonathan palardy {{{
nnoremap <leader>f4 :call preserve("%s/\\s\\+$//e")<cr>
function! Preserve(command)
	" preparation: save last search, and cursor position.
	let _s=@/
	let l = line(".")
	let c = col(".")
	" do the businesg:
	execute a:command
	" clean up: restore previous search history, and cursor position
	let @/=_s
	call cursor(l, c)
endfunction
" }}}
"==================================================
" language switching {{{
nmap <c-space> a<c-^><esc>
vmap <silent> <c-space> <esc>a<c-^><esc>gv
set keymap=russian-jcukenwin
" раскладка по умолчанию для ввода - английская
set iminsert=0
" раскладка по умолчанию для поиска - английская
set imsearch=0
" }}}
" mappings end}}}
"==================================================
set hidden
set ts=4 sts=4 sw=4 noexpandtab
set nobackup
set nowritebackup
set noswapfile
set hlsearch
set ignorecase					   " case insensitive search
set smartcase					   " case sensitive when uc present
" don't automatically wrap text when typing
set formatoptions-=t
set number
set relativenumber
set foldenable
" abbrev. of messages (avoids 'hit enter')
set shortmess+=mraoott
set linebreak
set breakindent
set splitright
set splitbelow
set undofile
set undodir=$home/vimfiles/undodir
set undolevels=1000
"==================================================
" statusline: {{{
"==================================================
" powerline symbols quickref: , , , , , , 
set statusline=
set statusline+=[%n]%<
set statusline+=%{&bomb?'[!]':''}
set statusline+=[%{&ts}:%{&sw}:%{&sts}                            " tab/shiftwidth
set statusline+=\|%{&et?'et':'noet'}
set statusline+=\|%{&ai?'a':'-'}%{&si?'i':'-'}%{&cin?'c':'-'}     " indent values
set statusline+=\|%{&wrap?'<':'>'}:%{&tw}]                        " wrap/textwidth
set statusline+=\ %f
set statusline+=%=
set statusline+=%#error#%m%r%k%*
set statusline+=%{&ff!='unix'?'['.&ff.']':''}                   | " display only if &ff != unix
set statusline+=%{(&fenc!='utf-8'&&&fenc!='')?'['.&fenc.']':''} | " display only if not utf-8
set statusline+=%y
set statusline+=[%l,%c][%l:%p%%]
set statusline+=%#error#
set statusline+=%{Statuslinetabwarning()}
set statusline+=%{StatuslineTrailingSpaceWarning()}
set statusline+=%*
"==================================================
"return '[&et]' if &et is set wrong {{{
"return '[mixed-indenting]' if spaces and tabs are used to indent
"return an empty string if everything is fine @ martin grefnel
function! Statuslinetabwarning()
	if !exists("b:statusline_tab_warning")
		let tabs = search('^\t', 'nw') != 0
		let spaces = search('^ ', 'nw') != 0

		if tabs && spaces
			let b:statusline_tab_warning =	'[mixed-indent]'
		elseif (spaces && !&et) || (tabs && &et)
			let b:statusline_tab_warning = '[&et]'
		else
			let b:statusline_tab_warning = ''
		endif
	endif
	return b:statusline_tab_warning
endfunction " }}}
"==================================================
"return '[\s]' if trailing white space is detected {{{
"return '' otherwise @ Martin Grefnel
function! StatuslineTrailingSpaceWarning()
	if !exists("b:statusline_trailing_space_warning")
		if search('\s\+$', 'nw') != 0
			let b:statusline_trailing_space_warning = '[\s]'
		else
			let b:statusline_trailing_space_warning = ''
		endif
	endif
	return b:statusline_trailing_space_warning
endfunction " }}}
"==================================================
augroup spacetab_warning " {{{
	au!
	"recalculate the tab warning flag when idle and after writing
	autocmd cursorhold,bufwritepost * unlet! b:statusline_tab_warning
	"recalculate the trailing whitespace warning when idle, and after saving
	autocmd cursorhold,bufwritepost * unlet! b:statusline_trailing_space_warning
augroup END " }}}
"==================================================
" }}}

" {{{ netrw: Configuration
"	  ====================
" (From Max Cantor's .vimrc)
" let g:netrw_banner=0		  " disable banner
let g:netrw_browse_split=2
let g:netrw_altv=1			" open splits to the right
let g:netrw_liststyle=3		" tree view
" hide gitignore'd files
let g:netrw_list_hide=netrw_gitignore#Hide()
" hide dotfiles by default (this is the string toggled by netrw-gh)
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" }}}

"==================================================
if has('multi_byte')
	" Legacy encoding is the system default encoding
	let legacy_encoding=&encoding
endif
"==================================================
if has('gui_running') && has('multi_byte')
	" Set encoding (and possibly fileencodings)
	if $LANG !~ '\.' || $LANG =~? '\.UTF-8$'
		set encoding=utf-8
	else
		let &encoding=matchstr($LANG, '\.\zs.*')
		let &fileencodings='ucs-bom,utf-8,' . &encoding
		let legacy_encoding=&encoding
	endif
endif
"==================================================
" sensible.vim - Defaults everyone can agree on {{{
"==================================================

if has('autocmd')
	filetype plugin indent on
endif
if has('syntax') && !exists('g:syntax_on')
	syntax enable
endif

" Use :help 'option' to see the documentation for the given option.

set autoindent
set backspace=indent,eol,start
set complete-=i
set smarttab

set nrformats-=octal

set ttimeout
set ttimeoutlen=100

set incsearch
" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
	nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

set laststatus=2
set ruler
set wildmenu

if !&scrolloff
	set scrolloff=1
endif
if !&sidescrolloff
	set sidescrolloff=5
endif
set display+=lastline

if &listchars ==# 'eol:$'
	if has('multi_byte')
		scriptencoding utf-8
		set listchars=tab:›\ ,trail:•,extends:#,precedes:<,nbsp:⋅
		let &showbreak='↪ '
	else
		set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
	endif
	set list
endif

if v:version > 703 || v:version == 703 && has("patch541")
	set formatoptions+=j " Delete comment character when joining commented lines
endif

if has('path_extra')
	setglobal tags-=./tags tags-=./tags; tags^=./tags;
endif

if &shell =~# 'fish$' && (v:version < 704 || v:version == 704 && !has('patch276'))
	set shell=/bin/bash
endif

set autoread

if &history < 1000
	set history=1000
endif
if &tabpagemax < 50
	set tabpagemax=50
endif
if !empty(&viminfo)
	set viminfo^=!
endif
set sessionoptions-=options

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux\|^Eterm'
	set t_Co=16
endif

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
	runtime! macros/matchit.vim
endif

inoremap <C-U> <C-G>u<C-U>

" sensible END }}}
"==================================================
" GUI & Terminal settings {{{
if g:is_gui
	" General GUI settings
	set guioptions-=T	" No toolbar
	set guioptions-=e
	" Always show file types in menu
	let do_syntax_sel_menu=1
	" Encoding menu {{{
	menu Кодировка.utf-8 :e ++enc=utf8<CR>
	menu Кодировка.windows-1251 :e ++enc=cp1251<CR>
	menu Кодировка.utf-16le :e ++enc=utf-16le<CR>
	menu Кодировка.cp866 :e ++enc=cp866<CR>
	menu Кодировка.koi8-r :e ++enc=koi8-r<CR>
	" }}}

	if g:is_windows
		set guifont=DejaVu_Sans_Mono_for_Powerline:h12:cRUSSIAN

		augroup gui_enter
			au!
			autocmd GUIEnter * set vb t_vb= lines=40 columns=103 linespace=0
		augroup END

		execute 'colorscheme '.g:cs_wingui
	endif
else
	" General terminal settings
	set vb t_vb=
	if g:is_nvim
		execute 'colorscheme '.g:cs_nvim
	elseif g:is_conemu | " {{{
		" it's already set above
		" set vb t_vb=
		set term=xterm
		set termencoding=utf8
		set t_Co=256
		let &t_AB="\e[48;5;%dm"
		let &t_AF="\e[38;5;%dm"
		execute 'colorscheme '.g:cs_cmder
	endif " }}}
endif
"}}}
" vim:set fdm=marker:
