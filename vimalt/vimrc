if &cp | set nocp | endif
" XXX: prevents unexpected shit from happening:
" XXX: as result netrw, showmatch will fail
" XXX: use for :debug:
" set noloadplugins

set nobackup
set noswapfile
set viminfo='50,<1000,s100,:20
if !has('nvim')
	" XXX: if set this hangs or crashes nvim:
	set viminfo+=n~/vimfiles/tmp/viminfo
endif

set encoding=utf-8
set keymap=russian-jcukenwin
set iminsert=0
set imsearch=-1

" visual xpenb {{{1
if has('gui_running')
	set gfn=Droid_Sans_Mono_Slashed_for_Pow:h12:cRUSSIAN:qCLEARTYPE,Source_Code_Pro:h12:cRUSSIAN:qCLEARTYPE,Consolas:h12
	set guioptions=ac
else
	set termguicolors
endif

" for fzf {{{2
" Terminal colors for seoul256 color scheme
if has('nvim')
	let g:terminal_color_0 = '#4e4e4e'
	let g:terminal_color_1 = '#d68787'
	let g:terminal_color_2 = '#5f865f'
	let g:terminal_color_3 = '#d8af5f'
	let g:terminal_color_4 = '#85add4'
	let g:terminal_color_5 = '#d7afaf'
	let g:terminal_color_6 = '#87afaf'
	let g:terminal_color_7 = '#d0d0d0'
	let g:terminal_color_8 = '#626262'
	let g:terminal_color_9 = '#d75f87'
	let g:terminal_color_10 = '#87af87'
	let g:terminal_color_11 = '#ffd787'
	let g:terminal_color_12 = '#add4fb'
	let g:terminal_color_13 = '#ffafaf'
	let g:terminal_color_14 = '#87d7d7'
	let g:terminal_color_15 = '#e4e4e4'
else
	let g:terminal_ansi_colors = [
				\ '#4e4e4e', '#d68787', '#5f865f', '#d8af5f',
				\ '#85add4', '#d7afaf', '#87afaf', '#d0d0d0',
				\ '#626262', '#d75f87', '#87af87', '#ffd787',
				\ '#add4fb', '#ffafaf', '#87d7d7', '#e4e4e4'
				\ ]
endif
" }}}2

set novb t_vb=
set number
set relativenumber
set ruler

" statusline {{{2

set laststatus=2
runtime stl4.vim

" statusline }}}2

if &listchars ==# 'eol:$' || has('nvim')
	set listchars=tab:\â”‚\ ,trail:Â·,extends:Â»,precedes:Â«,nbsp:+
	set list
endif

set showmatch
set matchtime=2

set linebreak
let &showbreak='â”— '
set breakindent

set scrolloff=5
set sidescroll=5

" cures some of "press <cr> to continue" messages
set cmdheight=2
set shortmess+=filmnrwxaoOstTWAIcF
" }}}1

set hidden

set incsearch

set ignorecase
set smartcase

set wildmenu
" Command <Tab> completion, list matches, then longest common part, then all.
set wildmode=list:longest,full
set completeopt=menuone,preview
set omnifunc=syntaxcomplete#Complete

if has('virtualedit')
	set virtualedit=block
endif
set backspace=indent,eol,start
set nojoinspaces

" fuck 'r', fuck 'o' and fuck automagical addition of shit in my lines
set formatoptions=qnl1j

" maps {{{1
let g:mapleader = "\<Space>"

" get the leader right {{{2
" https://konfekt.github.io/blog/2016/10/03/get-the-leader-right
nnoremap : ,
xnoremap : ,
onoremap : ,

" <CR> is better option! unless buffer is netrw...
nnoremap , :
xnoremap , :
onoremap , :

" evil and heresy {{{2
nnoremap <C-c><C-s> :up<CR>
inoremap <C-c><C-s> <C-o>:up<CR>
nnoremap <M-x> :
inoremap <M-x> <C-o>:

" Auto-delete closing parenthesis/brace {{{2
function! BetterBackSpace() abort
	let cur_line = getline('.')
	let before_char = cur_line[col('.')-2]
	let after_char = cur_line[col('.')-1]
	if (before_char == '(' && after_char == ')') || (before_char == '{' && after_char == '}') || (before_char == '[' && after_char == ']')
		return "\<Del>\<BS>"
	else
		return "\<BS>"
endfunction
inoremap <silent> <BS> <C-r>=BetterBackSpace()<CR>
" }}}2

" folds {{{2
" 'smart' <Tab>
nnoremap <expr> <Tab> foldlevel('.') > 0 ? "za" : "\<Tab>"
nnoremap <expr> <S-Tab> &foldlevel > 0 ? "zM" : "zR"
nnoremap <leader>z zfap

function! InsertFoldMarker(...) abort
	let l:cur_line   = getline('.')
	let l:markers    = split(&l:fmr, ',')
	let l:marker     = (a:0) && len(l:markers)>1 ? l:markers[1] : l:markers[0]
	let l:level      = foldlevel('.')
	let l:level      = l:level == 0 ? '1' : l:level
	let l:cms        = split(&l:cms, '%s')
	" TODO: handle paired comment markers
	let l:cms        = (a:0) && len(l:cms)>1 ? l:cms[1] : l:cms[0]
	if has('nvim')
		let l:marker_cnt = 0
		for c in split(l:cur_line, '\zs')
			if c == l:cms
				let l:marker_cnt += 1
			endif
		endfor
	else
		let l:marker_cnt = count(l:cur_line, l:cms)
	endif
	let l:cms        = (l:marker_cnt % 2 == 0) && (l:cur_line[0] != l:cms) ? l:cms.' ' : ''
	let l:space      = l:cur_line[-1:]  =~ '\s' || len(l:cur_line)<2 ? '' : ' '
	exe "norm! m1A".l:space.l:cms.l:marker.l:level."\<Esc>`1"
	return ''
endfunction

nnoremap <leader><Tab>  :call InsertFoldMarker()<CR>
nnoremap <leader>1<Tab> :call InsertFoldMarker(1)<CR>
inoremap <localleader><Tab>  <C-r>=InsertFoldMarker()<CR>
inoremap <localleader>1<Tab> <C-r>=InsertFoldMarker(1)<CR>
" }}}2

" count matches @ vim wiki
map <leader>* *<C-O>:%s///gn<CR>

" insert newlines above and beyond {{{2
nnoremap <leader>j mjo<Esc>`j
inoremap <localleader>j <Esc>mjo<C-o>`j
nnoremap <leader>k mkO<Esc>`k
inoremap <localleader>k <Esc>mkO<C-o>`k
" }}}2

" buffers {{{2
nnoremap gb :ls<CR>:b
nnoremap <C-Tab> <C-^>
" also a lang switch, especially useful on neovim
inoremap <C-Tab> <C-^>
cnoremap <C-Tab> <C-^>
nnoremap <leader>q :bp<bar>bd#<CR>
nnoremap <leader>0 :%bd<CR>

" copypaste {{{2
map Y y$
nnoremap gy :%y+<CR>

" better than <leader>ohmygodimissedthatnextbutton
map! <S-Insert> *
vmap  "*d
vmap <C-Del> "*d
vmap <S-Del> "*d
vmap <C-Insert> "*y
vmap <S-Insert> "-d"*P
nmap <S-Insert> "*P

" QoL {{{2
nnoremap <C-W>e <C-W>=
nnoremap vv ^vg_
vnoremap < <gv
vnoremap > >gv
nnoremap <leader>cd :cd %:p:h<CR>
" nnoremap <leader>f4 :%s/\s\+$//e<CR>
" better version:
nnoremap <silent><leader>f4 :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>
" screen line scroll - very useful with wrap on
" https://bluz71.github.io/2017/05/15/vim-tips-tricks.html
nnoremap <expr> j v:count ? (v:count > 5 ? "m'" . v:count : '') . 'j' : 'gj'
nnoremap <expr> k v:count ? (v:count > 5 ? "m'" . v:count : '') . 'k' : 'gk'

" Search
" also by Marco Trosi
vnoremap / y/\V^R"<CR>
vnoremap ? y/\V\<^R"\><CR>
vnoremap * y/\V\<^R"<CR>
vnoremap # y/\V^R"\><CR>

" specials {{{2
nnoremap <F2> :Lex<CR>
nnoremap <F4> :set hlsearch! hlsearch?<cr>
nnoremap <F6> :setl wrap! wrap?<CR>
imap <F6> <C-O><F6>
nnoremap <F11> :e ~\vimfiles\packages.vim<CR>
nnoremap <F12> :e $MYVIMRC<CR>
nnoremap <S-F12> :so $MYVIMRC<CR>

" insert date {{{2
nnoremap <S-F8> i<C-R>=strftime("%Y-%m-%d %a %H:%M")<CR><Esc>
inoremap <S-F8> <C-R>=strftime("%Y-%m-%d %a %H:%M")<CR>

" vim arpeggio {{{2
" Arpeggio inoremap jk  <Esc>

" plugins {{{1
runtime packages.vim

" important!
filetype plugin indent on
syntax enable

" autocommands {{{1
if has("autocmd")
augroup reload_vimrc " {{{2
	autocmd!
	autocmd BufWritePost [_.g]\\\{-\}vimrc,init.vim nested source $MYVIMRC | echo 'vimrc reloaded'
augroup END

augroup ft_vim " {{{2
" because vim commentary doesn't know anything
	autocmd!
	autocmd FileType vim setlocal com=sO:\"\ -,mO:\"\ \ ,eO:\"\",:\"
	\ commentstring=\"%s
augroup END

augroup ft_python " {{{2
	au!
	au FileType python setlocal makeprg=python\ %
	au FileType python nnoremap <buffer> <F7> :up<bar>make<CR>
	au FileType python nnoremap <buffer> <leader>d iprint(f'***=line('.')<CR>*** : {}')<Esc>==0f{a
	au FileType python iabbr <buffer> dbg print(f'***=line('.')<CR>***: {}')<Esc>0f{a
augroup END

endif

" commands {{{1
command! WipeReg for i in range(34,122) | silent! call setreg(nr2char(i), []) | endfor
" }}}1

" XXX: don't put anything important below this line

" XXX: oh nice, it doesn't load 'opt' packages
" XXX: for :debug:
" packloadall

